<div class="wrapper">
  <%= render 'shared/header' %>
  
  <div id=courseInfo class="row">
    <div class="small-12 columns text-center info-text">
      Monte a sua grade 
      <div class="subtext"><%= @course.name %></div>
    </div>
  </div>
  
  <div class="row">
    <div class="columns small-6 large-2">
      <%= link_to "Voltar", painel_path, :class=>"button export-button float-left" %>
    </div>
    <div class="columns small-6 large-8">
      <div id=changeSemester class="row">
        <div class="small-4 columns">
          <div id="previousSemester" class="button export-button float-left" >
            <
          </div>
        </div>
        <div class="small-4 columns">
            <div id="infoSemester" class="columns text-center info-text"></div>
        </div>
        <div class="small-4 columns">
          <div id="nextSemester" class="button export-button float-right">
            >
          </div>
        </div>
      </div>
    </div>
    <div class="columns small-12 large-2">
      <div id="completeRecord" class="button export-button float-right">Concluir</div>
    </div>
  </div>
  
  <div class="row">
    <ul id="blockTabs" class="tabs" data-tabs>
      <li id="discipline_ob" class="tabs-title is-active" aria-selected="true"><a href="#mandatory">Obrigatórias</a></li>
      <li id="discipline_op" class="tabs-title"><a href="#elective">Optativas</a></li>
      <li id="planning_result" class="tabs-title"><a href="#planning">Planejamento</a></li>
    </ul>
  </div>

  <div class="row block tabs-content" data-tabs-content="blockTabs">
    <div id="mandatory" class="tabs-panel no-padding is-active">
      <div class="row show-for-large">
        <div class="medium-1 columns text-center no-padding column-title">
          Semestre
        </div>
        <div class="medium-11 columns text-center column-title">
          Disciplinas
        </div>
      </div>

      <% unless @semesters.blank? %>
        <% width = 100.0 / @semesters.max_by{ |s| s ? s.size : 0 }.size %>
        <% @semesters[1..-1].each_with_index do |semester, i| %>
          <% if semester %>
            <div id="semesterRowNumber<%=i + 1%>" class="row semester-row">
              <div class="small-12 large-1 columns text-center no-padding semester">
                <span class="number"><%= i + 1 %><span class="hide-for-large">º Semestre</span></span>
              </div>

              <div class="small-12 large-11 columns">
                <% semester.each do |discipline| %>
                  <div id="<%= discipline.code %>" code="<%= discipline.code %>" click-source="curriculo" class="block-discipline discipline text-center" style="width: <%= width %>%;" >
                    <div class="text">
                      <div class="code"><%= discipline.code %></div>
                      <div class="name"><%= discipline.name %></div>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
        <% end %>
      <% end %>
    </div>

    <div id="elective" class="tabs-panel no-padding">
      <div class="search">
        <i class="icon-search"></i>
        <input id="electiveFilterInput" class="search-bar small-12 large-offset-1 large-10 columns" type="text" placeholder="Nome ou código da disciplina" />
      </div>

      <div class="small-12 columns no-padding">
        <ul class="block-list">
          <% @ops.each do |op| %>
            <li id="<%= op.code %>" code="<%= op.code %>" click-source="optativa" class="block-list-item list-item-discipline elective-discipline discipline"><%= "#{op.code} - #{op.name}" %></li>
          <% end %>
        </ul>
      </div>
    </div>
    
    <div id="planning" class="tabs-panel no-padding">
      <div class="row">
        <div class="small-12 columns">
          <%= render partial: 'planning_table', locals: { table_id: 'largeTablePlanning', table_class: 'planning-table unstriped large-table', table_style: 'background-color: white' } %>
        </div>
      </div>
    </div>
    
    <div id="elementDisciplinesDetails" class="row">
      <div class="columns">
        <ul class="accordion" data-accordion data-allow-all-closed="true">
          <li id="resultDisciplinesDetail" class="accordion-item" data-accordion-item>
            <a href="#" class="accordion-title" style="font-size: 15px; color: black; font-weight: bold;"><div id="infoDisciplinesSelected">Nenhuma disciplina selecionada</div></a>
            <div class="accordion-content" data-tab-content>
              <%= render partial: 'disciplines_table', locals: { table_id: 'largeTableSemester', table_class: 'planning-table unstriped large-table' } %>
            </div>
          </li>
        </ul>
      </div>
    </div>
    
    <div class="row">
      <div class="small-12 columns">
        <span id="goToTop" class="go-to-top">▲ Topo</span>
      </div>
    </div>
  </div>
  
</div>

<%= render 'shared/footer' %>

<% content_for :script do %>
<script>

  var preRequisites       = <%= raw @pre  %>;
  var postRequisites      = <%= raw @post %>;
  var allDisciplines      = <%= raw @all_disciplines %>;
  var studentPlannings    = <%= raw @params %>
  
  var selectedDisciplines = [];
  
  var groupBy = function(xs, key) {
    return xs.reduce(function(rv, x) {
      (rv[x[key]] = rv[x[key]] || []).push(x);
      return rv;
    }, {});
  };
  
  var allDisciplinesOfSemester = 
  groupBy(
  allDisciplines.filter(function(d) {
      if(d[3] != 0){
        return d;
      }
  }).map(function(x) {
    var obj = {
          code: x[0],
          semester: x[3]
        };
    return obj;
  }),'semester');
  
  var paramSemesters = [];
  
  var semester_start = {
      year: <%= Semester.first.year %>,
      period: <%= Semester.first.period %>
  };
  
  var semester_current = {
      year: semester_start.year,
      period: semester_start.period
  };
  
  $('#infoSemester').text(semester_current.year + "." + semester_current.period);
  
  semesterContainsDiscipline  = function(code) {
    var semester_dis = paramSemesters.find(function(x) {
      if (x.disciplines.includes(code)) {
        return x;
      }
    });
    return semester_dis;
  }
  
  disciplinesPlanning = function(semester) {
      var result = paramSemesters.map(function(param) {
          if (param.semester.year > semester.year) {
              return param.disciplines;
          } else if (param.semester.year == semester.year && param.semester.period > semester.period) {
              return param.disciplines;
          }
      }).reduce((list, sub) => list.concat(sub), []);
      return result;
  }
  
  disciplinesDone = function(semester) {
      var result = paramSemesters.map(function(param) {
          if (param.semester.year < semester.year) {
              return param.disciplines;
          } 
          else if (param.semester.year == semester.year && param.semester.period < semester.period) {
              return param.disciplines;
          }
      }).reduce((list, sub) => list.concat(sub), []);
      return result;
  }
  
  deleteDisciplineAlreadySelected  = function(code) {
    var indexDiscipline = selectedDisciplines.indexOf(code);
    if (indexDiscipline > -1) {
      selectedDisciplines.splice(indexDiscipline, 1);
    }
  }
  
  getInfoAdditionalDiscipline = function(discipline){
    var disciplineSemester = allDisciplines.find(function(element) {
        return element[0] === discipline;
    });
    var objDiscipline = {
      code: disciplineSemester[0],
      name: disciplineSemester[1],
      nature: disciplineSemester[2]
    }
    return objDiscipline;
  }
  
  updateTableDisciplineResult = function() {
    $("#largeTableSemester tbody").empty();
    var list_trs = "";
    selectedDisciplines.sort().forEach(function(selected) {
      var disciplineSelect = getInfoAdditionalDiscipline(selected);
      var deleteRecord = "<a class=\"delete-record\"data-id=" + disciplineSelect.code + ">Excluir</a></td>"
      var td =
        "<td>" + disciplineSelect.nature + "</td>" +
        "<td>" + disciplineSelect.code + "</td>" +
        "<td>" + disciplineSelect.name + "</td>" +
        "<td>" + deleteRecord + "</td>";
      var tr = "<tr id= rec-" + disciplineSelect.code + ">" + td + "</tr>";
      list_trs += tr;
    });
    var tbody = "<tbody>" + list_trs + "</tbody>";
    $("#largeTableSemester").append(tbody);
  }
  
  fillInfoDisciplinesSelected = function() {
    $('#infoDisciplinesSelected').text(selectedDisciplines.length > 0  ? "Selecionadas: " + selectedDisciplines.sort().join() : "Nenhuma disciplina selecionada");  
    updateTableDisciplineResult();
  }
  
  fillSelected = function(code) {
    var $discipline = $("#" + code);
    if (!selectedDisciplines.includes(code)) {
      if ($discipline) {
        if ($discipline.is("li")) {
          $discipline.css({ 'color': 'black'});
        }
        else {
          $discipline.css("border-color","#F8F8F8");
          $discipline.css({ 'color': 'black'});
        }
      }
    } 
    else {
      if ($discipline) {
        if ($discipline.is("li")) {
          $discipline.css({ 'color': '#98FB98'});
        }
        else{
          $discipline.css("border-color","#98FB98");
          $discipline.css({ 'color': '#c5f5c5'});
        }
      }
    }
    fillInfoDisciplinesSelected();
  }
  
  var selectDiscipline = function(class_name) {
      $("." + class_name).off('click').click(function(event) {
          var code = $(this).attr('code');
          var preRequisitesStudent = [];
          if (selectedDisciplines.includes(code)) {
              deleteDisciplineAlreadySelected(code);
          } 
          else {
              var message = '';
              var $toastContent;
              var disciplines_planning = disciplinesPlanning(semester_current);
              if (disciplines_planning.includes(code)) {
                  var semesterDiscipline = semesterContainsDiscipline(code)
                  message = 'Disciplina ' + code + " já selecionada para o semestre: " + semesterDiscipline.semester.year + "." + semesterDiscipline.semester.period;
                  $toastContent = $('<span>' + message + '</span>');
                  toastr.error($toastContent)
              } 
              else {
                  if (preRequisites[code]) {
                      var disciplinesUsed = disciplinesDone(semester_current);
                      preRequisites[code].forEach(function(discipline) {
                          if (!disciplinesUsed.includes(discipline) && !selectedDisciplines.includes(discipline)) {
                              preRequisitesStudent.push(discipline);
                          }
                      });
                  }
                  if (preRequisitesStudent.length > 0) {
                      message = 'Pré-requisito necessário ' + preRequisitesStudent.join();
                      $toastContent = $('<span>' + message + '</span>');
                      toastr.error($toastContent)
                  }
                  else{
                    selectedDisciplines.push(code);
                  }
              }
          }
          fillSelected(code);
          event.stopPropagation();
          event.preventDefault();
      });
  }
  
  $('#largeTableSemester').on('click', 'a.delete-record', function(e) {
      var code = jQuery(this).attr('data-id');
      deleteRecord(code, "result");
  });
  
  var changeBgColor = function(code, color_pre, color_post) {
      return function() {
          if (preRequisites[code]) {
              preRequisites[code].forEach(function(preReq) {
                  var $preReq = $("#" + preReq);
                  if ($preReq)
                    $preReq.css("background-color", color_pre);
              });
          }
          if (postRequisites[code]) {
              postRequisites[code].forEach(function(postReq) {
                  if (!selectedDisciplines.includes(postReq)) {
                      var $postReq = $("#" + postReq);
                      if ($postReq)
                          $postReq.css("background-color", color_post);
                  }
              });
          }
      };
  }
  
  var nextPeriod = function() {
      var semester = semester_current;
      if (semester.period == 1) {
          semester.period++;
          return semester;
      } else {
          semester.year++;
          semester.period = 1;
          return semester;
      }
  }
  
  var previousPeriod = function() {
      var semester = semester_current;
      if (semester.period == 1) {
          semester.year--;
          semester.period++;
          return semester;
      } else {
          semester.period = 1;
          return semester;
      }
  }
  
  function findWithAttr(array, attr, value) {
    for(var i = 0; i < array.length; i += 1) {
        if(array[i][attr] === value) {
            return i;
        }
    }
    return -1;
  }
  
  function findWithAttrValue(array, value) {
    for(var i = 0; i < array.length; i += 1) {
        if(array[i] === value) {
            return i;
        }
    }
    return -1;
  }
  
  checkAvailableSemester = function(semester) {
    var $semesterRow = $("#semesterRowNumber" + semester);
    if ($semesterRow) {
      if(allDisciplinesOfSemester[semester].length > 0){
        $semesterRow.show();
      }
      else{
        $semesterRow.hide();
      }
    }
  }
  
  reviewsDisciplineAvailableSemester = function(code, semester, action) {
    if(action === 'hide'){
      var indexDiscipline = findWithAttr(allDisciplinesOfSemester[semester], 'code', code);
      if (indexDiscipline > -1) {
        allDisciplinesOfSemester[semester].splice(indexDiscipline, 1);
      }
    }
    else{
      if (allDisciplinesOfSemester[semester].filter(x => x.code === code).length == 0) {
        var obj = {
          code: code,
          semester: semester
        };
        allDisciplinesOfSemester[semester].push(obj);
      }
    }
    checkAvailableSemester(semester);
  }
  
  fillInfoSemester = function(semester) { 
      var disciplinesAvailable = allDisciplinesOfSemester;
      var disciplinesUsed = disciplinesDone(semester);
      allDisciplines.forEach(function(disc) {
          var $discipline = $("#" + disc[0]);
          if ($discipline) {
            if (disciplinesUsed.includes(disc[0])) {
              $discipline.hide();
              if(disc[3] != 0){
                reviewsDisciplineAvailableSemester(disc[0], disc[3], 'hide');
              }
            }
            else{
              $discipline.show();
              if(disc[3] != 0){
                reviewsDisciplineAvailableSemester(disc[0], disc[3], 'show');
              }
            }
          }
          fillSelected(disc[0]);
      });
  }
   
  function validPrevious(semester) {
      if (semester.year == semester_start.year && semester.period == semester_start.period) {
        $("#previousSemester").css( {'visibility': 'hidden'});
      } 
      else {
        $("#previousSemester").css( {'visibility': 'visible'});
      }
  }
  
  function loadDisciplines(semester) {
      validPrevious(semester);
      var semester_selected = paramSemesters.find(function(element) {
          return element.semester.year == semester_current.year && element.semester.period == semester_current.period;
      });
      if (semester_selected) {
          selectedDisciplines = semester_selected.disciplines;
          $('#infoSemester').text(semester_current.year + "." + semester_current.period);
      } 
      else {
          selectedDisciplines = [];
          $('#infoSemester').text(semester_current.year + "." + semester_current.period);
      }
      fillInfoSemester(semester);
  }
  
  $("#goToTop").click(function() {
      $('html,body').animate({
          scrollTop: $("#courseInfo").offset().top
      }, 500);
  });
  
   $("#electiveFilterInput").on("input", function() {
      filterList("elective-discipline", $(this).val());
  });
  
  $("#searchForm").submit(function() {
      var pattern = $("#allinput").val();
      if (pattern.length == 0)
          $("#allinput").addClass("error");
      else {
          $("#allinput").removeClass("error");
          $("#allBlockList").empty();
          var query = $("#allinput").val();
  
          $.ajax({
                  type: 'GET',
                  url: '<%= discipline_ajax_search_path %>',
                  data: {
                      pattern: query
                  },
                  dataType: 'html'
              })
              .done(function(html) {
                  $("#allBlockList").html(html);
                  updateDisciplineEvents("search-discipline", true);
              });
      }
      return false;
  });
  
  function updateDisciplinesResult(action) {
    var semester_selected = paramSemesters.find(function(element) {
        return element.semester.year == semester_current.year && element.semester.period == semester_current.period;
    });
    if (semester_selected) {
      paramSemesters.forEach(function(param) {
        if (param.semester.year == semester_current.year && param.semester.period == semester_current.period) {
          param.disciplines = selectedDisciplines;
        }
      });
    } 
    else {
      if(selectedDisciplines.length > 0){
        paramSemesters.push({
          semester: {
            year: semester_current.year,
            period: semester_current.period
          },
          disciplines: selectedDisciplines
        });
      }
    }
    paramSemesters = paramSemesters.filter(function(x) {
      return x.disciplines.length > 0;
    });
    if(action != "complete"){
      semester_current = action === "previous" ? previousPeriod() : nextPeriod();
      loadDisciplines(semester_current);
    }
  }
  
  $("#nextSemester").click(function() {
      updateDisciplinesResult("next");
  });
  
  $("#previousSemester").click(function() {
      updateDisciplinesResult("previous");
  });
  
  $("#completeRecord").click(function() {
      updateDisciplinesResult("complete");
      var result = paramSemesters.filter(function(x) {
          return x.disciplines.length > 0;
      });
      $.ajax({
          url: "/planning",
          type: "post",
          data: {
              data_planning: JSON.stringify(result)
          }
      });
  });
  
  $("#discipline_ob").click(function() {
    $("#elementDisciplinesDetails").show();
  });
  
  $("#discipline_op").click(function() {
    $("#elementDisciplinesDetails").show();
  });
  
  function getResultTablePlanning(list) {
    var trs = "";
    list.forEach(function(x){
      if(list.indexOf(x) > 0){
        trs += "<tr style=\"background-color:#f8f8f8\"><td colspan=\"5\"></td></tr>";    
      }
      var trRow = "<tr><td rowspan=" + (x.disciplines.length + 1) + ">" + x.semester.year +"."+x.semester.period  + "</td></tr>";
      trs += trRow;
        x.disciplines.forEach(function(d){
          var deleteRecord = "<a class=\"delete-record-planning\"data-id=" + d.code + ">Excluir</a></td>"
          var td =
              "<td>" + d.nature + "</td>" +
              "<td>" + d.code + "</td>" +
              "<td>" + d.name + "</td>" +
              "<td>" + deleteRecord + "</td>";
                var tr = "<tr id= recPlanning-" + d.code + ">" + td + "</tr>";
                trs += tr;
        });
      });
    return trs;
  }
  
  function updateTablePlanningRecord() {
    $("#elementDisciplinesDetails").hide();
    $("#largeTablePlanning tbody").empty();
    listItens = [];
    updateDisciplinesResult("complete");
    paramSemesters.forEach(function(param){
      var objParam = {
        semester: param.semester,
        disciplines: param.disciplines.map(x => new getInfoAdditionalDiscipline(x))
      }
      listItens.push(objParam);
    });
    var result = listItens.sort((a, b) => (a.semester.year  > b.semester.year) ? 1 : (a.semester.year === b.semester.year) ? ((a.semester.period > b.semester.period) ? 1 : -1) : -1 )
    $("#largeTablePlanning tbody").append(getResultTablePlanning(result));
  }
  
  $("#planning_result").click(function() {
    updateTablePlanningRecord();
  });
  
  function deleteRecord(code, action) {
    if(selectedDisciplines.includes(code)) {
      deleteDisciplineAlreadySelected(code);
      fillSelected(code);
    }
    if(action === "planning"){
      paramSemesters.forEach(function(param){
        var indexDiscipline = findWithAttrValue(param.disciplines, code);
        if (indexDiscipline > -1) {  
          param.disciplines.splice(indexDiscipline, 1);
        }
      });
      paramSemesters = paramSemesters.filter(function(x) {
          return x.disciplines.length > 0;
      });
    }
  }
  
   $('#largeTablePlanning').on('click', 'a.delete-record-planning', function(e) {
      var code = jQuery(this).attr('data-id');
      deleteRecord(code,"planning");
      updateTablePlanningRecord();
  });
  
  $(document).ready(function() {
      // Start loading spinner
      var spinner = new Spinner().spin();
      $("#loader").append(spinner.el)
  
      $(".block-discipline").each(function() {
          var code = $(this).attr("code");
          $(this).mouseenter(changeBgColor(code, "#F5C5C5", "#C5F5C5"));
          $(this).mouseleave(changeBgColor(code, "", ""));
      });
  
      if (studentPlannings.length > 0) {
          paramSemesters = studentPlannings;
          loadDisciplines(semester_current)
      }
      validPrevious(semester_current);
      selectDiscipline("discipline");
  });
</script>
<% end %>
